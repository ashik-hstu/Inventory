
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import common.OpenPdf;
import dao.ConnectionProvider;
import dao.InventoryUtils;
import java.awt.Color;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
//import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author ashikulislam
 */
public class ManageOrder extends javax.swing.JFrame {

    private int customerPk = 0;
    private int productPk = 0;
    private int finalTotalPrice = 0;
    private String orderId = "";

    /**
     * Creates new form ManageOrder
     */
    public ManageOrder() {
        initComponents();
        setLocationRelativeTo(null);

    }

    private void clearProductFields() {

        productPk = 0;
        txtProductName.setText("");
        txtProductPrice.setText("");
        txtProductDescription.setText("");
        txtTotalAmount.setText("");

    }

//    for unique orderId
    public String getUniqueId(String prefix) {
        return prefix + System.nanoTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCustomer = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCustomerName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCustomerMobileNumber = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCustomerEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCustomerAddress = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProduct = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCart = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtProductPrice = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtProductDescription = new javax.swing.JTextField();
        txtTotalAmount1 = new javax.swing.JLabel();
        txtTotalAmount = new javax.swing.JTextField();
        btnAddToCart = new javax.swing.JButton();
        btnSaveOrder = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        lblFinalTotalPrice = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Fira Sans", 3, 36)); // NOI18N
        jLabel1.setText("......................Order Page........................");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Fira Sans", 2, 18)); // NOI18N
        jLabel2.setText("Customer Selection");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(117, 82, -1, -1));

        tableCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Mobile Number", "Email", "Address"
            }
        ));
        tableCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCustomer);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 389, 199));

        jLabel3.setFont(new java.awt.Font("Fira Sans", 2, 18)); // NOI18N
        jLabel3.setText("Selected Customer :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 350, -1, -1));

        jLabel4.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        jLabel4.setText("Name :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 402, -1, -1));
        getContentPane().add(txtCustomerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 425, 372, -1));

        jLabel5.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        jLabel5.setText("Mobile Number :");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 480, -1, -1));
        getContentPane().add(txtCustomerMobileNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 503, 372, -1));

        jLabel6.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        jLabel6.setText("Email :");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 544, -1, -1));
        getContentPane().add(txtCustomerEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 567, 372, -1));

        jLabel7.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        jLabel7.setText("Address :");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 608, -1, -1));
        getContentPane().add(txtCustomerAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 631, 372, -1));

        tableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Quantity", "Description", "Category ID", "Category Name"
            }
        ));
        tableProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableProduct);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 110, 463, 199));

        tableCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Name", "Quantity", "Price ", "Description", "Pertial Price"
            }
        ));
        tableCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCartMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableCart);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(945, 110, 401, 199));

        jLabel8.setFont(new java.awt.Font("Fira Sans", 2, 18)); // NOI18N
        jLabel8.setText("Product Selection");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(614, 82, -1, -1));

        jLabel9.setFont(new java.awt.Font("Fira Sans", 2, 18)); // NOI18N
        jLabel9.setText("Cart");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 82, -1, -1));

        jLabel10.setFont(new java.awt.Font("Fira Sans", 2, 18)); // NOI18N
        jLabel10.setText("Selected Product :");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 350, -1, -1));

        jLabel11.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        jLabel11.setText("Product Name :");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 402, -1, -1));
        getContentPane().add(txtProductName, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 425, 463, -1));

        jLabel12.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        jLabel12.setText("Product Price :");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 480, -1, -1));
        getContentPane().add(txtProductPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 503, 463, -1));

        jLabel13.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        jLabel13.setText("Description :");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 544, -1, -1));
        getContentPane().add(txtProductDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 567, 463, -1));

        txtTotalAmount1.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        txtTotalAmount1.setText("Total Amount:");
        getContentPane().add(txtTotalAmount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 608, -1, -1));
        getContentPane().add(txtTotalAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 631, 463, -1));

        btnAddToCart.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        btnAddToCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cart.png"))); // NOI18N
        btnAddToCart.setText("Add To Cart");
        btnAddToCart.setPreferredSize(new java.awt.Dimension(101, 33));
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddToCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 680, 250, -1));

        btnSaveOrder.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        btnSaveOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/saveOrder.png"))); // NOI18N
        btnSaveOrder.setText("Save Order ");
        btnSaveOrder.setPreferredSize(new java.awt.Dimension(148, 38));
        btnSaveOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveOrderActionPerformed(evt);
            }
        });
        getContentPane().add(btnSaveOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 420, 229, -1));

        btnReset.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset2.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.setPreferredSize(new java.awt.Dimension(72, 38));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        getContentPane().add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 500, 229, -1));

        btnClose.setFont(new java.awt.Font("Fira Sans", 3, 14)); // NOI18N
        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        btnClose.setText("Close");
        btnClose.setPreferredSize(new java.awt.Dimension(72, 29));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 660, 110, -1));

        jLabel14.setFont(new java.awt.Font("Fira Sans", 3, 24)); // NOI18N
        jLabel14.setText("Total Price (Tk) :");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(1048, 350, -1, -1));

        lblFinalTotalPrice.setBackground(new java.awt.Color(255, 51, 51));
        lblFinalTotalPrice.setFont(new java.awt.Font("Fira Sans", 3, 24)); // NOI18N
        lblFinalTotalPrice.setText("0000");
        getContentPane().add(lblFinalTotalPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(1229, 350, -1, -1));

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Home_bg2.jpg"))); // NOI18N
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, -10, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:

        txtCustomerName.setEditable(false);
        txtCustomerMobileNumber.setEditable(false);
        txtCustomerEmail.setEditable(false);
        txtCustomerAddress.setEditable(false);

        txtProductName.setEditable(false);
        txtProductPrice.setEditable(false);
        txtProductDescription.setEditable(false);

        DefaultTableModel model = (DefaultTableModel) tableCustomer.getModel();
        DefaultTableModel productModel = (DefaultTableModel) tableProduct.getModel();

        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from customer");
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("customer_pk"), rs.getString("name"), rs.getString("mobileNumber"), rs.getString("email"), rs.getString("address")});
            }

            rs = st.executeQuery("select * from product inner join category on product.category_fk= category.category_pk");
            while (rs.next()) {
                productModel.addRow(new Object[]{rs.getString("product_pk"), rs.getString("name"), rs.getString("Price"), rs.getString("quantity"), rs.getString("description"), rs.getString("category_fk"), rs.getString(8)});
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }


    }//GEN-LAST:event_formComponentShown

    private void btnSaveOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveOrderActionPerformed
        // TODO add your handling code here:

        if (finalTotalPrice != 0 && !txtCustomerName.getText().equals("")) {
            orderId = getUniqueId("Bill-");

            // Calculate discount
            double discount = 0;
            if (finalTotalPrice >= 1000 && finalTotalPrice < 5000) {
                discount = finalTotalPrice * 0.02; // 2% discount
            } else if (finalTotalPrice >= 5000) {
                discount = finalTotalPrice * 0.05; // 5% discount
            }

            double finalTotalPriceAfterDiscount = finalTotalPrice - discount;

            DefaultTableModel dtm = (DefaultTableModel) tableCart.getModel();
            if (tableCart.getRowCount() != 0) {
                for (int i = 0; i < tableCart.getRowCount(); i++) {
                    try {
                        Connection con = ConnectionProvider.getCon();
                        String query = "update product set quantity = quantity - ? where product_pk = ?";
                        PreparedStatement ps = con.prepareStatement(query);
                        ps.setInt(1, Integer.parseInt(dtm.getValueAt(i, 2).toString()));
                        ps.setInt(2, Integer.parseInt(dtm.getValueAt(i, 0).toString()));
                        ps.executeUpdate();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                }
            }

            try {
                SimpleDateFormat myDateFormat = new SimpleDateFormat("dd-MM-yyyy");
                Calendar cal = Calendar.getInstance();
                Connection con = ConnectionProvider.getCon();
                PreparedStatement ps = con.prepareStatement("insert into orderDetail(orderId,customer_fk,orderDate,totalPaid) values(?,?,?,?)");
                ps.setString(1, orderId);
                ps.setInt(2, customerPk);
                ps.setString(3, myDateFormat.format(cal.getTime()));
                ps.setDouble(4, finalTotalPriceAfterDiscount);
                ps.executeUpdate();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
            try {
                SimpleDateFormat myDateFormat = new SimpleDateFormat("dd-MM-yyyy");
                Calendar cal = Calendar.getInstance();
                PdfWriter.getInstance(doc, new FileOutputStream(InventoryUtils.billPath + "" + orderId + ".pdf"));
                doc.open();

                Paragraph projectName = new Paragraph("                                                          Bill Management \n");
                doc.add(projectName);

                Paragraph stars = new Paragraph("********************************************************************************************************** ");
                doc.add(stars);

                Paragraph data = new Paragraph("\tOrder ID: " + orderId + "\nDate: " + myDateFormat.format(cal.getTime()) + "\nTotal Price: " + finalTotalPrice);
                doc.add(data);
                
                int zero=00;
                if (discount > 0) {
                    Paragraph discountMessage = new Paragraph("\tDiscount : " + discount + " Tk (" + (discount == finalTotalPrice * 0.02 ? "2%" : "5%") + ")\n");
                    doc.add(discountMessage);
                } else {
                    Paragraph discountMessage = new Paragraph("\tDiscount : " + zero);
                    doc.add(discountMessage);
                }
                Paragraph finalprice = new Paragraph("\tPayable Price : " + finalTotalPriceAfterDiscount);
                doc.add(finalprice);
                doc.add(stars);

                Paragraph newLine = new Paragraph("                                                                                                           ");
                doc.add(newLine);

                PdfPTable table1 = new PdfPTable(5);
                PdfPCell nameCell = new PdfPCell(new Phrase("Name"));
                PdfPCell descriptionCell = new PdfPCell(new Phrase("Description"));
                PdfPCell priceCell = new PdfPCell(new Phrase("Per unit Price"));
                PdfPCell quantityCell = new PdfPCell(new Phrase("Quantity"));
                PdfPCell pertialTotalCell = new PdfPCell(new Phrase("Pertial Total"));

                BaseColor bgColor = new BaseColor(255, 204, 51);
                nameCell.setBackgroundColor(bgColor);
                descriptionCell.setBackgroundColor(bgColor);
                priceCell.setBackgroundColor(bgColor);
                quantityCell.setBackgroundColor(bgColor);
                pertialTotalCell.setBackgroundColor(bgColor);

                table1.addCell(nameCell);
                table1.addCell(descriptionCell);
                table1.addCell(priceCell);
                table1.addCell(quantityCell);
                table1.addCell(pertialTotalCell);

                
                for (int i = 0; i < tableCart.getRowCount(); i++) {
                    table1.addCell(tableCart.getValueAt(i, 1).toString());
                    table1.addCell(tableCart.getValueAt(i, 4).toString());
                    table1.addCell(tableCart.getValueAt(i, 3).toString());
                    table1.addCell(tableCart.getValueAt(i, 2).toString());
                    table1.addCell(tableCart.getValueAt(i, 5).toString());
                }

                doc.add(table1);
                doc.add(newLine);

                Paragraph mess = new Paragraph("\t            ****************** Thanks for being with us. Please come again.*******************           ");
                doc.add(mess);

                doc.close();
                OpenPdf.OpenById(orderId);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error generating PDF: " + e.getMessage());
            }

            setVisible(false);
            new ManageOrder().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a customer or product for processing the order.");
        }


    }//GEN-LAST:event_btnSaveOrderActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:

        setVisible(false);


    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new ManageOrder().setVisible(true);

    }//GEN-LAST:event_btnResetActionPerformed

    private void tableCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCustomerMouseClicked
        // TODO add your handling code here:

        int index = tableCustomer.getSelectedRow();
        TableModel model = tableCustomer.getModel();

        String id = model.getValueAt(index, 0).toString();
        customerPk = Integer.parseInt(id);

        String name = model.getValueAt(index, 1).toString();
        txtCustomerName.setText(name);

        String mobileNumber = model.getValueAt(index, 2).toString();
        txtCustomerMobileNumber.setText(mobileNumber);

        String email = model.getValueAt(index, 3).toString();
        txtCustomerEmail.setText(email);

        String address = model.getValueAt(index, 4).toString();
        txtCustomerAddress.setText(address);


    }//GEN-LAST:event_tableCustomerMouseClicked

    private void tableProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductMouseClicked
        // TODO add your handling code here:

        int index = tableProduct.getSelectedRow();
        TableModel model = tableProduct.getModel();

        String id = model.getValueAt(index, 0).toString();
        productPk = Integer.parseInt(id);

        String name = model.getValueAt(index, 1).toString();
        txtProductName.setText(name);

//        String quantity = model.getValueAt(index, 2).toString();
        String price = model.getValueAt(index, 2).toString();
        txtProductPrice.setText(price);
        String description = model.getValueAt(index, 4).toString();
        txtProductDescription.setText(description);


    }//GEN-LAST:event_tableProductMouseClicked

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:

        String numberOfAmount = txtTotalAmount.getText();
        if (!numberOfAmount.equals("")) {

            String productName = txtProductName.getText();
            String productPrice = txtProductPrice.getText();
            String productDescription = txtProductDescription.getText();

            int totalPrice = Integer.parseInt(numberOfAmount) * Integer.parseInt(productPrice);

            int stockChecking = 0;
            int exitedProduct = 0;

            try {

                Connection con = ConnectionProvider.getCon();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("select * from product where product_pk=" + productPk + "");

                while (rs.next()) {
                    if (rs.getInt("quantity") >= Integer.parseInt(numberOfAmount)) {
                        stockChecking = 1;
                    } else {
                        JOptionPane.showMessageDialog(null, "Product is out of Stock.Please refill the stock. Only " + rs.getInt("quantity") + " product is left in the storage.");
                    }
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);

            }

            if (stockChecking == 1) {

                DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
                if (tableCart.getRowCount() != 0) {
                    for (int i = 0; i < tableCart.getRowCount(); i++) {
                        if (Integer.parseInt(model.getValueAt(i, 0).toString()) == productPk) {
                            exitedProduct = 1;
                            JOptionPane.showMessageDialog(null, "Product already exited in the Cart.");
                        }
                    }
                }

                if (exitedProduct == 0) {
                    model.addRow(new Object[]{productPk, productName, numberOfAmount, productPrice, productDescription, totalPrice});
                    finalTotalPrice = finalTotalPrice + totalPrice;
                    lblFinalTotalPrice.setText(String.valueOf(finalTotalPrice));
                    JOptionPane.showMessageDialog(null, "Product Added to Cart Successfully");

                }

                clearProductFields();
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please fill up the Total amount.");
        }

        setVisible(true);


    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void tableCartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCartMouseClicked
        // TODO add your handling code here:

        int index = tableCart.getSelectedRow();
        int i = JOptionPane.showConfirmDialog(null, "Do you want to remove the selected product?", "select", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            TableModel model = tableCart.getModel();

            String pertialTotal = model.getValueAt(index, 5).toString();

            finalTotalPrice = finalTotalPrice - Integer.parseInt(pertialTotal);

            lblFinalTotalPrice.setText(String.valueOf(finalTotalPrice));

            ((DefaultTableModel) tableCart.getModel()).removeRow(index);

        }


    }//GEN-LAST:event_tableCartMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSaveOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFinalTotalPrice;
    private javax.swing.JTable tableCart;
    private javax.swing.JTable tableCustomer;
    private javax.swing.JTable tableProduct;
    private javax.swing.JTextField txtCustomerAddress;
    private javax.swing.JTextField txtCustomerEmail;
    private javax.swing.JTextField txtCustomerMobileNumber;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtProductDescription;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtProductPrice;
    private javax.swing.JTextField txtTotalAmount;
    private javax.swing.JLabel txtTotalAmount1;
    // End of variables declaration//GEN-END:variables
}
